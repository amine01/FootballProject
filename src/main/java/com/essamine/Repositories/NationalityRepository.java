package com.essamine.Repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.essamine.entities.Nationality;

public class NationalityRepository {
	private final DataSource ds;

	public NationalityRepository() {
		try {
			Context context = new InitialContext();
			try {
				ds = (DataSource) context
						.lookup("java:comp/env/jdbc/footballprojectDB");
			} finally {
				context.close();
			}

		} catch (NamingException e) {
			throw new RuntimeException(e);
		}

	}

	public void init() throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "create table if not exists nationality(id integer generated by default as identity primary key,"
						+ "nationality varchar(255),person_id integer,foreign key (person_id) references person)";
				statement.execute(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void create(Nationality nationality) throws SQLException {

		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "insert into nationality(nationality,person_id) values('"
						+ nationality.getNationality()
						+ "',"
						+ nationality.getPerson_id() + ")";
				statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next()) {
						nationality.setId(generatedKeys.getLong("id"));
					}

				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public List<Nationality> findAll() throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			String sql = "select * from nationality";
			try {
				ResultSet rs = statement.executeQuery(sql);
				try {
					List<Nationality> nationalities = new ArrayList<Nationality>();
					while (rs.next()) {
						nationalities.add(new Nationality(rs.getLong(1), rs
								.getString(2), rs.getLong(3)));
					}
					return nationalities;
				} finally {
					rs.close();
				}
			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}
	}

	public void update(Nationality nationality) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			String sql = "update nationality set nationality='"
					+ nationality.getNationality() + "', person_id="
					+ nationality.getPerson_id() + " where id="
					+ nationality.getId();
			try {
				statement.executeUpdate(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void delete(Nationality nationality) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			String sql = "delete from nationality where id="
					+ nationality.getId();
			try {
				statement.executeUpdate(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public Nationality findById(Long id) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			String sql = "select * from nationality where nationality.id=" + id;
			try {
				ResultSet rs = statement.executeQuery(sql);
				try {
					Nationality nationality = null;
					if (!rs.next()) {
						return null;
					} else {
						nationality = new Nationality(rs.getLong(1),
								rs.getString(2), rs.getLong(3));
					}
					return nationality;
				} finally {
					rs.close();
				}
			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}
	}

}
